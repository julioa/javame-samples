/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cesine.ipm.cabarceno.adrian;

import java.io.IOException;
import java.util.Vector;
import java.lang.Integer;
import javax.microedition.lcdui.Image;
import java.lang.System.*;

/**
 *
 * @author Cactus
 */
public class SirvePuntos {

    Vector RutaX, RutaY;
    Vector VectorX, VectorY;
    Vector puntosInteres, interesDevolver;
    Interes Osos;
    Interes WC;
    Interes Cocodrilos;
    Interes Elefantes;

    public SirvePuntos() {
        try {
            puntosInteres = new Vector();//Adaptar para que tenga coordenadas puntos interes en vez pixeles
            Elefantes = new Interes(620, 210, Image.createImage("imagenes/elefante.png"));
            WC = new Interes(650, 250, Image.createImage("imagenes/WC.gif"));
            Cocodrilos = new Interes(600, 250, Image.createImage("imagenes/coc.gif"));
            Osos = new Interes(400, 250, Image.createImage("imagenes/oso.gif"));
            puntosInteres.addElement(WC);
            puntosInteres.addElement(Elefantes);
            puntosInteres.addElement(Osos);
            puntosInteres.addElement(Cocodrilos);
        } catch (IOException e) {
            System.out.println("Comprueba la carga de imagenes");
        }
    }

    public Vector calculapuntos(int Xcrop, int XmedidaCrop, double Zoom, int Ycrop, int YmedidaCrop) {
        interesDevolver = new Vector();
        Interes aux;
        for (int j = 0; j < puntosInteres.size(); j++) {
            aux = (Interes) puntosInteres.elementAt(j);
            if (aux.getX() >= Xcrop && aux.getX() <= Xcrop) {
                if (aux.getY() >= Ycrop && aux.getY() <= Ycrop) {
                    aux.setposX((int) ((aux.getX() - Xcrop) * Zoom));
                    aux.setposY((int) ((aux.getY() - Ycrop) * Zoom));
                    interesDevolver.addElement(aux);
                }

            }
        }
        return interesDevolver;
    }

    public void aÃ±adeRuta(int x, int y) {
        Integer aux;
        aux = new Integer(x);
        RutaX.addElement(aux);
        aux = new Integer(y);
        RutaY.addElement(aux);
    }

    public void calcula(Vector x, Vector y) {
        RutaX = x;
        RutaY = y;
    }

    public void getRuta(int Xcrop, int XmedidaCrop, double Zoom, int Ycrop, int YmedidaCrop) {
        VectorX = new Vector();
        VectorY = new Vector();
        Integer aux;
        Integer auy;
        int auxiliar;
        for (int j = 0; j < RutaX.size(); j++) {
            aux = (Integer) RutaX.elementAt(j);
            auy = (Integer) RutaY.elementAt(j);
            if (aux.intValue() >= Xcrop && aux.intValue() <= (Xcrop + XmedidaCrop)) {
                if (auy.intValue() >= Ycrop && auy.intValue() <= (Ycrop + YmedidaCrop)) {
                    auxiliar = aux.intValue();
                    auxiliar = auxiliar - Xcrop;
                    auxiliar = (int) (auxiliar * Zoom);
                    aux = new Integer(auxiliar);
                    VectorX.addElement(auy);
                    auxiliar = auy.intValue();
                    auxiliar = auxiliar - Ycrop;
                    auxiliar = (int) (auxiliar * Zoom);
                    aux = new Integer(auxiliar);
                    VectorY.addElement(auy);
                }
            }
        }

    }

    public Vector getX() {
        return VectorX;
    }

    public Vector getY() {
        return VectorY;
    }
}
